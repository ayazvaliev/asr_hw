defaults:
  - model: deepspeech2
  - writer: wandb
  - metrics: cer_wer
  - datasets: clean
  - dataloader: example
  - transforms: transforms
  - tokenizer: bpe_tokenizer
  - _self_

data_dir: data/datasets/librispeech

optimizer:
  _target_: torch.optim.AdamW
  lr: 3e-4
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  max_lr: 1e-2
  pct_start: 0.1
  steps_per_epoch: ${trainer.epoch_len}
  epochs: ${trainer.n_epochs}
  anneal_strategy: cos
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCTextEncoder
  words_path: words.txt
  lexicon: lexicon.txt
  lm: lm.bin
  beam_size: 500
  lm_weight: 2
  word_score: 0
  beam_threshold: 50

  
trainer:
  log_step: 50
  n_epochs: 20
  epoch_len: null
  max_grad_norm: 400
  device_tensors: ["audio", "audio_len", "text_encoded", "text_encoded_length"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: False # if True, will override the previous run with the same name
  monitor: "min val_WER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 5 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved"
  seed: 1

tokenizer_config:
  init_vocab_path: "tokens.txt"
  save_path: "trained_tokenizers"
