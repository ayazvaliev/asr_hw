defaults:
  - model: deepspeech2
  - writer: wandb
  - metrics: cer_wer
  - datasets: clean
  - dataloader: dataloader
  - transforms: transforms
  - tokenizer: bpe_tokenizer
  - _self_

data_dir: data/datasets/librispeech
aug_dir: aug_data
lm_guidance_dir: lm_guidance
index_dir: .

optimizer:
  cls: torch.optim.AdamW
  weight_decay: 3e-4
  optimizer_config:
    lr: 1e-4
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  max_lr: 1e-3
  pct_start: 0.3
  final_div_factor: 10000.0

lr_scheduler_config:
  warmup_ratio: 0.05
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCTextEncoder
  words_path: ${lm_guidance_dir}/words.txt
  lexicon: ${lm_guidance_dir}/lexicon.txt
  lm: ${lm_guidance_dir}/lm.bin
  beam_size: 50
  lm_weight: 2
  word_score: 0
  beam_threshold: 50


trainer:
  log_step: 10
  epoch_len: null
  n_epochs: 50
  max_grad_norm: 10
  mixed_precision: float32
  gradient_accumulation: 256
  sorta_grad: True
  skip_oom: True
  device_tensors: ["text_encoded", "text_encoded_length", "spectrogram", "spectrogram_length"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: False # if True, will override the previous run with the same name
  monitor: "min val_WER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 1 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: 6  # epochs for early stopping
  save_dir: "saved"
  seed: 228

tokenizer_config:
  use_tokenizer: False
  init_vocab_path: ${lm_guidance_dir}/tokens.txt
  save_path: "."
  vocab_size: 200

DEBUG: False